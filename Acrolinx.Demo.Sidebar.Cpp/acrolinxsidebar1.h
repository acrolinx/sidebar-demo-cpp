#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CAcrolinxsidebar1 wrapper class

class CAcrolinxsidebar1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CAcrolinxsidebar1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x32245F63, 0x9E1D, 0x412B, { 0xA3, 0x61, 0xAD, 0x40, 0x85, 0x6C, 0x4B, 0xD9 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:
enum
{
    CC_DEFAULT = 0,
    CC_MAIN = 1,
    CC_DETAIL = 2
}Component_Category;
enum
{
    IF_XML = 0,
    IF_TEXT = 1,
    IF_HTML = 2,
    IF_WORD_XML = 3,
    IF_MARKDOWN = 4,
    IF_AUTO = 5
}Input_Format;


// Operations
public:

// _DAcrolinxSidebarSDK

// Functions
//

	void Start()
	{
		InvokeHelper(0x65, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void StartWithServerAddress(LPCTSTR serverUrl)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x66, DISPATCH_METHOD, VT_EMPTY, NULL, parms, serverUrl);
	}
	void LogInfo(LPCTSTR msg)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x67, DISPATCH_METHOD, VT_EMPTY, NULL, parms, msg);
	}
	void LogTrace(LPCTSTR msg)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x68, DISPATCH_METHOD, VT_EMPTY, NULL, parms, msg);
	}
	void LogError(LPCTSTR msg)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x69, DISPATCH_METHOD, VT_EMPTY, NULL, parms, msg);
	}
	void LogWarn(LPCTSTR msg)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x6a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, msg);
	}
	LPDISPATCH CreateDocument()
	{
		LPDISPATCH result;
		InvokeHelper(0x6c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString Check(LPDISPATCH document)
	{
		CString result;
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, document);
		return result;
	}
	void InvalidateRanges(LPDISPATCH matches)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x6e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, matches);
	}
	void RegisterClientComponent(LPCTSTR id, LPCTSTR name, LPCTSTR version, long category)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 ;
		InvokeHelper(0x6f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, id, name, version, category);
	}
	LPDISPATCH CreateRangeList()
	{
		LPDISPATCH result;
		InvokeHelper(0x70, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

// Properties
//

CString GetServerAddress()
{
	CString result;
	GetProperty(0xc9, VT_BSTR, (void*)&result);
	return result;
}
void SetServerAddress(CString propVal)
{
	SetProperty(0xc9, VT_BSTR, propVal);
}
BOOL GetShowServerSelector()
{
	BOOL result;
	GetProperty(0xca, VT_BOOL, (void*)&result);
	return result;
}
void SetShowServerSelector(BOOL propVal)
{
	SetProperty(0xca, VT_BOOL, propVal);
}
CString GetClientSignature()
{
	CString result;
	GetProperty(0xcb, VT_BSTR, (void*)&result);
	return result;
}
void SetClientSignature(CString propVal)
{
	SetProperty(0xcb, VT_BSTR, propVal);
}
CString GetMinimumSidebarVersion()
{
	CString result;
	GetProperty(0xcc, VT_BSTR, (void*)&result);
	return result;
}
void SetMinimumSidebarVersion(CString propVal)
{
	SetProperty(0xcc, VT_BSTR, propVal);
}
CString GetStartPageSourceLocation()
{
	CString result;
	GetProperty(0x12d, VT_BSTR, (void*)&result);
	return result;
}
void SetStartPageSourceLocation(CString propVal)
{
	SetProperty(0x12d, VT_BSTR, propVal);
}
BOOL GetReadOnlySuggestions()
{
	BOOL result;
	GetProperty(0xcd, VT_BOOL, (void*)&result);
	return result;
}
void SetReadOnlySuggestions(BOOL propVal)
{
	SetProperty(0xcd, VT_BOOL, propVal);
}
BOOL GetSupportCheckSelection()
{
	BOOL result;
	GetProperty(0xce, VT_BOOL, (void*)&result);
	return result;
}
void SetSupportCheckSelection(BOOL propVal)
{
	SetProperty(0xce, VT_BOOL, propVal);
}
CString GetClientLocale()
{
	CString result;
	GetProperty(0xcf, VT_BSTR, (void*)&result);
	return result;
}
void SetClientLocale(CString propVal)
{
	SetProperty(0xcf, VT_BSTR, propVal);
}
LPUNKNOWN GetStorage()
{
	LPUNKNOWN result;
	GetProperty(0x12e, VT_UNKNOWN, (void*)&result);
	return result;
}
void SetStorage(LPUNKNOWN propVal)
{
	SetProperty(0x12e, VT_UNKNOWN, propVal);
}


};
